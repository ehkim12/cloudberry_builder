FROM rockylinux/rockylinux:9.6

# Argument for configuring the timezone
ARG TIMEZONE_VAR="Asia/Seoul"

# Environment variables
ENV container=docker
ENV MULTINODE=false

RUN dnf update -y && \
    dnf install -y systemd \
    systemd-libs && \
    dnf clean all

# Clean up unnecessary systemd units
RUN [ -d /lib/systemd/system/sysinit.target.wants ] && find /lib/systemd/system/sysinit.target.wants/ -type l -not -name 'systemd-tmpfiles-setup.service' -delete || echo "Directory /lib/systemd/system/sysinit.target.wants does not exist" && \
    [ -d /lib/systemd/system/multi-user.target.wants ] && find /lib/systemd/system/multi-user.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/multi-user.target.wants does not exist" && \
    find /etc/systemd/system/*.wants/ -type l -delete || echo "Directory /etc/systemd/system/*.wants does not exist" && \
    [ -d /lib/systemd/system/local-fs.target.wants ] && find /lib/systemd/system/local-fs.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/local-fs.target.wants does not exist" && \
    [ -d /lib/systemd/system/sockets.target.wants ] && find /lib/systemd/system/sockets.target.wants/ -type l -not -name '*udev*' -delete || echo "Directory /lib/systemd/system/sockets.target.wants does not exist" && \
    [ -d /lib/systemd/system/basic.target.wants ] && find /lib/systemd/system/basic.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/basic.target.wants does not exist" && \
    [ -d /lib/systemd/system/anaconda.target.wants ] && find /lib/systemd/system/anaconda.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/anaconda.target.wants does not exist"

COPY ./configs/* /tmp/

# enable EPEL and CRB once
RUN dnf -y install epel-release && dnf config-manager --set-enabled crb

# your existing deps + sshpass
RUN dnf -y install \
    git gcc gcc-c++ make cmake bison flex pkgconfig \
    libicu libicu-devel libxml2 libxml2-devel lz4 lz4-devel \
    openssl openssl-devel krb5-libs krb5-devel openldap openldap-devel \
    pam pam-devel readline readline-devel zlib zlib-devel \
    perl-ExtUtils-Embed python3 python3-devel libevent libevent-devel \
    xerces-c xerces-c-devel \
    sshpass \
    && dnf clean all

RUN      dnf install -y --allowerasing sudo git && \
    dnf install -y --allowerasing apr-devel bison bzip2-devel curl cmake3 diffutils flex gcc gcc-c++ \
    glibc-langpack-en glibc-locale-source iproute krb5-devel libcurl-devel libevent-devel \
    libxml2-devel libuuid-devel libzstd-devel lz4-devel net-tools openldap-devel \
    openssl-devel openssh-server pam-devel perl perl-ExtUtils-Embed perl-Test-Simple \
    perl-Env python3-devel python3-pip readline-devel rsync wget which zlib-devel && \
    dnf install -y --allowerasing gcc gcc-c++ make flex bison \
    readline-devel zlib-devel openssl-devel \
    libxml2-devel libicu-devel pam-devel perl-devel python3-devel && \
    dnf groupinstall "Development Tools" -y && \
    dnf install -y --allowerasing bison flex readline-devel zlib-devel \
    openssl-devel libcurl-devel apr-devel perl-ExtUtils-Embed \
    python3-devel cmake gcc-c++ && \
    dnf install -y golang && \
    dnf install -y --enablerepo=crb --allowerasing libuv-devel libyaml-devel perl-IPC-Run protobuf-devel

# Build & install Xerces-C 3.3.0 into /usr/local (lib64 on Rocky)
ARG XERCES_VER=3.3.0
RUN set -eux; \
    cd /tmp; \
    curl -fsSL https://archive.apache.org/dist/xerces/c/3/sources/xerces-c-${XERCES_VER}.tar.gz -o xerces-c.tar.gz; \
    tar xzf xerces-c.tar.gz; \
    cmake -S xerces-c-${XERCES_VER} -B build-xerces \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DBUILD_SHARED_LIBS=ON; \
    cmake --build build-xerces -j"$(nproc)"; \
    cmake --install build-xerces; \
    ldconfig; \
    # sanity checks (fail early if headers/libs aren't present)
    test -r /usr/local/include/xercesc/sax2/DefaultHandler.hpp; \
    test -r /usr/local/include/xercesc/util/XMLString.hpp; \
    test -r /usr/local/lib64/libxerces-c.so

RUN     cp /tmp/cbdb-sysctl.conf /etc/sysctl.conf && \
    cp /tmp/cbdb-limits.conf /etc/security/limits.d/cbdb-limits.conf && \
    cat /usr/share/zoneinfo/${TIMEZONE_VAR} > /etc/localtime && \
    echo "cdw" > /tmp/gpdb-hosts && \
    echo "/usr/local/lib" >> /etc/ld.so.conf && \
    echo "/usr/local/lib64" >> /etc/ld.so.conf && \
    ldconfig && \
    chmod 777 /tmp/gpinitsystem_singlenode && \
    chmod 777 /tmp/init_system.sh && \
    hostname > ~/orig_hostname && \
    /usr/sbin/groupadd gpadmin && \
    /usr/sbin/useradd  gpadmin -g gpadmin -G wheel && \
    setcap cap_net_raw+ep /usr/bin/ping && \
    echo "cbdb@123"|passwd --stdin gpadmin && \
    echo "gpadmin        ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers && \
    echo "root           ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers && \
    echo "export COORDINATOR_DATA_DIRECTORY=/data0/database/coordinator/gpseg-1" >> /home/gpadmin/.bashrc && \
    #echo "source /usr/local/cloudberry-db/greenplum_path.sh"                >> /home/gpadmin/.bashrc && \
    echo "source /usr/local/cloudberry-db/cloudberry-env.sh"                >> /home/gpadmin/.bashrc && \
    mkdir -p /data0/database/coordinator /data0/database/primary /data0/database/mirror && \
    chown -R gpadmin:gpadmin /data0 && \
    ssh-keygen -A && \
    echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config

RUN cd /tmp/ && \
    git clone https://github.com/apache/cloudberry.git /tmp/cloudberry  && \
    cd /tmp/cloudberry  && \
    git submodule update --init --recursive  && \
    git fetch --tags  && \
    git tag -l "2.0.0-incubating-*" 

# Toolchain & flags for Cloudberry build
ENV CC=/usr/bin/cc \
    CXX=/usr/bin/g++ \
    CFLAGS="-O3 -ftree-vectorize -Wno-suggest-attribute=format -Wno-missing-prototypes -Wno-error=cast-function-type" \
    CXXFLAGS="-O3 -ftree-vectorize -Wno-suggest-attribute=format -Wno-error" \
    CPPFLAGS="-I/usr/local/include" \
    LDFLAGS="-L/usr/local/lib64 -L/usr/local/lib -Wl,-rpath=/usr/local/lib64 -Wl,-rpath=/usr/local/lib" \
    PKG_CONFIG_PATH="/usr/local/lib64/pkgconfig:/usr/local/lib/pkgconfig:${PKG_CONFIG_PATH}"

RUN     cd /tmp/cloudberry && \
    LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:/usr/local/xerces-c-3.3.0/lib:$LD_LIBRARY_PATH \
    ./configure --prefix=/usr/local/cloudberry-db \
    --enable-pxf \
    --enable-debug-extensions \
    --enable-ic-proxy \
    --enable-openssl-redirect \
    --enable-orca \
    --enable-pax \
    --with-gssapi \
    --with-icu \
    --with-ldap \
    --with-libxml \
    --with-lz4 \
    --with-openssl \
    --with-pam \
    --with-perl \
    --with-pgport=5432 \
    --with-python \
    --with-pythonsrc-ext \
    --with-ssl=openssl

RUN cd /tmp/cloudberry/contrib/pax_storage && \
    rm -rf build

RUN     cd /tmp/cloudberry && \
    make -j$(nproc) && \
    make install

RUN     cd /tmp/cloudberry/contrib && \
    make -j$(nproc) && \
    make install

RUN     cd /tmp/cloudberry/gpcontrib && \
    make -j$(nproc) && \
    make install

RUN cd /tmp/cloudberry  && \
    make -C gpMgmt clean all install 

# install gpbackup/gprestore 
ENV GOPATH="/tmp/go" \
    GOBIN="/tmp/go/bin" \
    PATH="/tmp/go/bin:$PATH"

RUN git clone https://github.com/cloudberrydb/gpbackup.git /tmp/gpbackup && \
    cd /tmp/gpbackup && \
    make depend && \
    make build && \
    /tmp/go/bin/gpbackup --version && \
    /tmp/go/bin/gprestore --version && \
    ls /tmp/go/bin
# ----------------------------------------------------------------------
# Set the Default User and Command
# ----------------------------------------------------------------------
# The default user is set to 'gpadmin', and the container starts by
# running the init_system.sh script. This container serves as a base
# environment, and the Apache Cloudberry RPM can be installed for
# testing and functional verification.
# ----------------------------------------------------------------------
USER gpadmin
ENV USER=gpadmin
WORKDIR /home/gpadmin

EXPOSE 5432 22

VOLUME [ "/sys/fs/cgroup" ]
CMD ["bash","-c","/tmp/init_system.sh"]