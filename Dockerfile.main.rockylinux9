FROM rockylinux/rockylinux:9

ARG CODEBASE_VERSION_VAR=${CODEBASE_VERSION_VAR}
ARG TIMEZONE_VAR="Asia/Shanghai"
# One ARG, one default value
ARG CB_REF=2.0.0-incubating-rc3

ENV container=docker
ENV MULTINODE=false

RUN dnf update -y && \
        dnf install -y systemd \
        systemd-libs && \
        dnf clean all

# Clean up unnecessary systemd units
RUN [ -d /lib/systemd/system/sysinit.target.wants ] && find /lib/systemd/system/sysinit.target.wants/ -type l -not -name 'systemd-tmpfiles-setup.service' -delete || echo "Directory /lib/systemd/system/sysinit.target.wants does not exist" && \
        [ -d /lib/systemd/system/multi-user.target.wants ] && find /lib/systemd/system/multi-user.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/multi-user.target.wants does not exist" && \
        find /etc/systemd/system/*.wants/ -type l -delete || echo "Directory /etc/systemd/system/*.wants does not exist" && \
        [ -d /lib/systemd/system/local-fs.target.wants ] && find /lib/systemd/system/local-fs.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/local-fs.target.wants does not exist" && \
        [ -d /lib/systemd/system/sockets.target.wants ] && find /lib/systemd/system/sockets.target.wants/ -type l -not -name '*udev*' -delete || echo "Directory /lib/systemd/system/sockets.target.wants does not exist" && \
        [ -d /lib/systemd/system/basic.target.wants ] && find /lib/systemd/system/basic.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/basic.target.wants does not exist" && \
        [ -d /lib/systemd/system/anaconda.target.wants ] && find /lib/systemd/system/anaconda.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/anaconda.target.wants does not exist"

COPY ./configs/* /tmp/

RUN     echo root:cbdb@123 | chpasswd && \
        dnf makecache && \
        dnf install -y yum-utils \
        epel-release \
        git && \
        yum-config-manager --disable epel-cisco-openh264 && \
        dnf makecache && \
        yum-config-manager --disable epel && \
        dnf install -y --enablerepo=epel \
        the_silver_searcher \
        bat \
        htop && \
        dnf install -y bison \
        cmake3 \
        ed \
        flex \
        gcc \
        gcc-c++ \
        glibc-langpack-en \
        go \
        initscripts \
        iproute \
        less \
        m4 \
        net-tools \
        openssh-clients \
        openssh-server \
        passwd \
        perl \
        rsync \
        sudo \
        tar \
        unzip \
        util-linux-ng \
        wget \
        sshpass \
        which && \
        dnf install -y apr-devel \
        bzip2-devel \
        krb5-devel \
        libcurl-devel \
        libevent-devel \
        libxml2-devel \
        libzstd-devel \
        openldap-devel \
        openssl-devel \
        pam-devel \
        perl-ExtUtils-Embed \
        perl-Test-Simple \
        perl-core \
        python3-devel \
        readline-devel \
        zlib-devel && \
        dnf install -y --enablerepo=crb \
        libuv-devel \
        libyaml-devel \
        perl-IPC-Run && \
        dnf install -y --enablerepo=epel \
        xerces-c-devel \ 
        lz4-devel

# CRB 활성화 + EPEL 설치 + jansson-devel 설치
RUN dnf -y install dnf-plugins-core && \
        dnf config-manager --set-enabled crb && \
        dnf -y install epel-release && \
        dnf -y install jansson jansson-devel pkgconf-pkg-config && \
        dnf clean all

RUN     cp /tmp/90-cbdb-sysctl.conf /etc/sysctl.conf && \
        cp /tmp/90-cbdb-limits.conf /etc/security/limits.d/90-cbdb-limits.conf && \
        cat /usr/share/zoneinfo/${TIMEZONE_VAR} > /etc/localtime && \
        echo "cdw" > /tmp/gpdb-hosts && \
        echo "/usr/local/lib" >> /etc/ld.so.conf && \
        echo "/usr/local/lib64" >> /etc/ld.so.conf && \
        ldconfig && \
        chmod 777 /tmp/gpinitsystem_singlenode && \
        chmod 777 /tmp/init_system.sh && \
        hostname > ~/orig_hostname && \
        /usr/sbin/groupadd gpadmin && \
        /usr/sbin/useradd  gpadmin -g gpadmin -G wheel && \
        setcap cap_net_raw+ep /usr/bin/ping && \
        echo "cbdb@123"|passwd --stdin gpadmin && \
        echo "gpadmin        ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers && \
        echo "root           ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers && \
        echo "export COORDINATOR_DATA_DIRECTORY=/data0/database/coordinator/gpseg-1" >> /home/gpadmin/.bashrc && \
        echo "source /usr/local/cloudberry-db/greenplum_path.sh"                >> /home/gpadmin/.bashrc && \
        mkdir -p /data0/database/coordinator /data0/database/primary /data0/database/mirror && \
        chown -R gpadmin:gpadmin /data0 && \
        ssh-keygen -A && \
        echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config && \
        echo "CFLAGS='-O3 -ftree-vectorize -Wno-suggest-attribute=format -Wno-missing-prototypes -Wno-error=cast-function-type'" >> /home/gpadmin/.bashrc && \
        echo "CXXFLAGS='-O3 -ftree-vectorize -Wno-suggest-attribute=format -Wno-error'" >> /home/gpadmin/.bashrc && \
        echo "export GOPATH=$HOME/go"  >> /home/gpadmin/.bashrc && \
        echo "export PATH=\$PATH:\$GOPATH/bin" >> /home/gpadmin/.bashrc

RUN cd /tmp; \
        git clone --depth=1 --branch "${CB_REF}" https://github.com/apache/cloudberry.git cloudberry; \
        cd cloudberry; \
        git submodule update --init --recursive --depth=1


RUN     cd /tmp/ && \
        git clone https://github.com/apache/cloudberry-gpbackup.git

RUN     cd /tmp/cloudberry && \
        ./configure --prefix=/usr/local/cloudberry-db \
        --enable-external-fts \
        --enable-ic-proxy                 \
        --enable-openssl-redirect         \
        --enable-mapreduce                \
        --enable-orafce                   \
        --enable-orca                     \
        --enable-pxf                      \
        --enable-tap-tests                \
        --with-gssapi                     \
        --with-ldap                       \
        --with-libxml                     \
        --with-lz4                        \
        --with-openssl                    \
        --with-pam                        \
        --with-perl                       \
        --with-pgport=5432                \
        --with-python                     \
        --with-pythonsrc-ext              \
        --with-ssl=openssl 

RUN     cd /tmp/cloudberry && \
        make -j$(nproc) && \
        make install

RUN     cd /tmp/cloudberry/contrib && \
        make -j$(nproc) && \
        make install

RUN     source /home/gpadmin/.bashrc && \
        cd /tmp/cloudberry-gpbackup && \
        make depend && \
        make build && \
        cp $HOME/go/bin/* /usr/local/cloudberry-db/bin



RUN set -eux; \
    cd /tmp/cloudberry/gpcontrib; \
    make -j"$(nproc)"; \
    make install

RUN set -eux; \
    cd /tmp/cloudberry; \
    make -C gpMgmt clean all install

# =========================
# gpbackup/gprestore
# =========================
ENV GOPATH="/tmp/go" \
    GOBIN="/tmp/go/bin" \
    PATH="/tmp/go/bin:${PATH}"

RUN set -eux; \
    git clone --depth=1 https://github.com/cloudberrydb/gpbackup.git /tmp/gpbackup; \
    cd /tmp/gpbackup; \
    make depend; \
    make build; \
    /tmp/go/bin/gpbackup --version; \
    /tmp/go/bin/gprestore --version; \
    ls -l /tmp/go/bin

# =========================
# PXF build & install
# =========================
ENV GPHOME=/usr/local/cloudberry-db \
    PXF_HOME=/usr/local/pxf \
    PXF_BASE=/home/gpadmin/pxf-base \
    JAVA_HOME=/usr/lib/jvm/java-11-openjdk \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF-8" \
    GRADLE_OPTS="-Dfile.encoding=UTF-8" \
    LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}

# Put BOTH dirs on PATH (append safely)
ENV PATH=/usr/local/cloudberry-db/bin:${PATH}
ENV PATH=/usr/local/pxf/bin:${PATH}
ENV PG_CONFIG=/usr/local/cloudberry-db/bin/pg_config

RUN set -eux; \
    git clone --depth=1 https://github.com/apache/cloudberry-pxf.git /tmp/pxf

# Ensure pxf-cli ends up where Makefile expects it
ENV GOPATH=/tmp/pxf/cli/go \
    GOBIN=/tmp/pxf/cli/go/bin \
    GO111MODULE=on
ENV PATH=${GOBIN}:${PATH}

# Preseed PXF env (if this file exists post-install; harmless otherwise)
RUN sed -i 's|^#\?export JAVA_HOME=.*|export JAVA_HOME=/usr/lib/jvm/java-11-openjdk|' /usr/local/pxf/conf/pxf-env-default || true

RUN set -euxo pipefail; \
    test -x "$PG_CONFIG" || (echo "[ERROR] pg_config not found at $PG_CONFIG"; ls -l /usr/local/cloudberry-db/bin || true; exit 1); \
    cd /tmp/pxf; \
    mkdir -p "${GOBIN}"; \
    make -j"$(nproc)" GOPATH="${GOPATH}" GOBIN="${GOBIN}" GRADLE_ARGS="-x test -Dfile.encoding=UTF-8"; \
    make install GPHOME="${GPHOME}" PXF_HOME="${PXF_HOME}" GOPATH="${GOPATH}" GOBIN="${GOBIN}" GRADLE_ARGS="-x test -Dfile.encoding=UTF-8"; \
    test -x "${PXF_HOME}/bin/pxf" || (echo "[ERROR] pxf binary missing in ${PXF_HOME}/bin"; ls -l "${PXF_HOME}/bin" || true; exit 2); \
    if [ -d "${GPHOME}/lib/postgresql" ] || [ -d "${GPHOME}/lib64/postgresql" ]; then \
    echo "[INFO] Found GP extension dir under ${GPHOME}/lib(64)/postgresql"; \
    else \
    echo "[ERROR] Neither ${GPHOME}/lib/postgresql nor ${GPHOME}/lib64/postgresql exists"; \
    ls -l "${GPHOME}/lib" || true; ls -l "${GPHOME}/lib64" || true; exit 2; \
    fi; \
    mkdir -p "${PXF_BASE}"; \
    chown -R gpadmin:gpadmin "${PXF_HOME}" "${PXF_BASE}"

RUN mkdir -p /usr/java && ln -sfn /usr/lib/jvm/java-11-openjdk /usr/java/default

# =========================
# pgvector
# =========================
RUN set -eux; \
    cd /tmp; \
    git clone --depth=1 --branch v0.8.0 https://github.com/pgvector/pgvector.git; \
    cd pgvector; \
    make -j"$(nproc)"; \
    make install


COPY ./script/prepare.sh /tmp/prepare.sh
COPY ./script/install.sh /tmp/install.sh

RUN     chmod 777 /tmp/prepare.sh
RUN     chmod 777 /tmp/install.sh
RUN     bash -x /tmp/prepare.sh

RUN     chown -R gpadmin:gpadmin /tmp

RUN sudo chown -R gpadmin:gpadmin /tmp/init_etcd.sh
RUN sudo chmod +x /tmp/init_etcd.sh


# ----------------------------------------------------------------------
# Set the Default User and Command
# ----------------------------------------------------------------------
# The default user is set to 'gpadmin', and the container starts by
# running the init_system.sh script. This container serves as a base
# environment, and the Apache Cloudberry RPM can be installed for
# testing and functional verification.
# ----------------------------------------------------------------------
USER gpadmin
ENV USER=gpadmin
WORKDIR /home/gpadmin

ENV BASHRCSOURCED=1
RUN /tmp/install.sh

EXPOSE 5432 22 5888

VOLUME [ "/sys/fs/cgroup" ]
CMD ["bash","-c","/tmp/init_system.sh"]
