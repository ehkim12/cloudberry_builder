FROM rockylinux/rockylinux:9

ARG CODEBASE_VERSION_VAR=${CODEBASE_VERSION_VAR}
ARG TIMEZONE_VAR="Asia/Shanghai"

ENV container=docker
ENV MULTINODE=false

RUN dnf update -y && \
    dnf install -y systemd \
                   systemd-libs && \
    dnf clean all

# Clean up unnecessary systemd units
RUN [ -d /lib/systemd/system/sysinit.target.wants ] && find /lib/systemd/system/sysinit.target.wants/ -type l -not -name 'systemd-tmpfiles-setup.service' -delete || echo "Directory /lib/systemd/system/sysinit.target.wants does not exist" && \
    [ -d /lib/systemd/system/multi-user.target.wants ] && find /lib/systemd/system/multi-user.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/multi-user.target.wants does not exist" && \
    find /etc/systemd/system/*.wants/ -type l -delete || echo "Directory /etc/systemd/system/*.wants does not exist" && \
    [ -d /lib/systemd/system/local-fs.target.wants ] && find /lib/systemd/system/local-fs.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/local-fs.target.wants does not exist" && \
    [ -d /lib/systemd/system/sockets.target.wants ] && find /lib/systemd/system/sockets.target.wants/ -type l -not -name '*udev*' -delete || echo "Directory /lib/systemd/system/sockets.target.wants does not exist" && \
    [ -d /lib/systemd/system/basic.target.wants ] && find /lib/systemd/system/basic.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/basic.target.wants does not exist" && \
    [ -d /lib/systemd/system/anaconda.target.wants ] && find /lib/systemd/system/anaconda.target.wants/ -type l -delete || echo "Directory /lib/systemd/system/anaconda.target.wants does not exist"

COPY ./configs/* /tmp/

RUN     echo root:cbdb@123 | chpasswd && \
        dnf makecache && \
        dnf install -y yum-utils \
                       epel-release \
                       git && \
        yum-config-manager --disable epel-cisco-openh264 && \
        dnf makecache && \
        yum-config-manager --disable epel && \
        dnf install -y --enablerepo=epel \
                       the_silver_searcher \
                       bat \
                       htop && \
        dnf install -y bison \
                       cmake3 \
                       ed \
                       flex \
                       gcc \
                       gcc-c++ \
                       glibc-langpack-en \
                       go \
                       initscripts \
                       iproute \
                       less \
                       m4 \
                       net-tools \
                       openssh-clients \
                       openssh-server \
                       passwd \
                       perl \
                       rsync \
                       sudo \
                       tar \
                       unzip \
                       util-linux-ng \
                       wget \
                       sshpass \
                       which && \
        dnf install -y apr-devel \
                       bzip2-devel \
                       krb5-devel \
                       libcurl-devel \
                       libevent-devel \
                       libxml2-devel \
                       libzstd-devel \
                       openldap-devel \
                       openssl-devel \
                       pam-devel \
                       perl-ExtUtils-Embed \
                       perl-Test-Simple \
                       perl-core \
                       python3-devel \
                       readline-devel \
                       zlib-devel && \
        dnf install -y --enablerepo=crb \
                       libuv-devel \
                       libyaml-devel \
                       perl-IPC-Run && \
        dnf install -y --enablerepo=epel \
                       xerces-c-devel

RUN     cp /tmp/90-cbdb-sysctl.conf /etc/sysctl.conf && \
        cp /tmp/90-cbdb-limits.conf /etc/security/limits.d/90-cbdb-limits.conf && \
        cat /usr/share/zoneinfo/${TIMEZONE_VAR} > /etc/localtime && \
        echo "cdw" > /tmp/gpdb-hosts && \
        echo "/usr/local/lib" >> /etc/ld.so.conf && \
        echo "/usr/local/lib64" >> /etc/ld.so.conf && \
        ldconfig && \
        chmod 777 /tmp/gpinitsystem_singlenode && \
        chmod 777 /tmp/init_system.sh && \
        hostname > ~/orig_hostname && \
        /usr/sbin/groupadd gpadmin && \
        /usr/sbin/useradd  gpadmin -g gpadmin -G wheel && \
        setcap cap_net_raw+ep /usr/bin/ping && \
        echo "cbdb@123"|passwd --stdin gpadmin && \
        echo "gpadmin        ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers && \
        echo "root           ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers && \
        echo "export COORDINATOR_DATA_DIRECTORY=/data0/database/coordinator/gpseg-1" >> /home/gpadmin/.bashrc && \
        echo "source /usr/local/cloudberry-db/greenplum_path.sh"                >> /home/gpadmin/.bashrc && \
        mkdir -p /data0/database/coordinator /data0/database/primary /data0/database/mirror && \
        chown -R gpadmin:gpadmin /data0 && \
        ssh-keygen -A && \
        echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config

RUN     cd /tmp/ && \
        unzip -d /tmp /tmp/cloudberrydb-${CODEBASE_VERSION_VAR}.zip && \
        mv /tmp/cloudberrydb-${CODEBASE_VERSION_VAR} /tmp/cloudberry

RUN     cd /tmp/cloudberry && \
        ./configure --prefix=/usr/local/cloudberry-db \
                    --enable-cassert                  \
                    --enable-debug-extensions         \
                    --enable-ic-proxy                 \
                    --enable-mapreduce                \
                    --enable-orafce                   \
                    --enable-orca                     \
                    --enable-pxf                      \
                    --enable-tap-tests                \
                    --with-gssapi                     \
                    --with-ldap                       \
                    --with-libxml                     \
                    --with-openssl                    \
                    --with-pam                        \
                    --with-perl                       \
                    --with-pgport=5432                \
                    --with-python                     \
                    --with-pythonsrc-ext

RUN     cd /tmp/cloudberry && \
        make -j$(nproc) && \
        make install

RUN     cd /tmp/cloudberry/contrib && \
        make -j$(nproc) && \
        make install

# ----------------------------------------------------------------------
# Set the Default User and Command
# ----------------------------------------------------------------------
# The default user is set to 'gpadmin', and the container starts by
# running the init_system.sh script. This container serves as a base
# environment, and the Apache Cloudberry RPM can be installed for
# testing and functional verification.
# ----------------------------------------------------------------------
USER gpadmin
ENV USER=gpadmin
WORKDIR /home/gpadmin

EXPOSE 5432 22

VOLUME [ "/sys/fs/cgroup" ]
CMD ["bash","-c","/tmp/init_system.sh"]
