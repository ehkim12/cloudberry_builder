# =========================
# Base
# =========================
FROM rockylinux/rockylinux:9.6

ARG TIMEZONE_VAR="Asia/Seoul"
ARG CB_REF="2.0.0-incubating-rc3"   # pin Cloudberry version/tag; can be a commit SHA
ARG XERCES_VER=3.3.0

LABEL org.opencontainers.image.title="Cloudberry Builder"
LABEL org.opencontainers.image.source="https://github.com/apache/cloudberry"
LABEL org.opencontainers.image.version="${CB_REF}"

ENV container=docker \
    MULTINODE=false

# Keep systemd minimal but functional
RUN set -eux; \
    dnf -y update; \
    dnf -y install systemd systemd-libs; \
    dnf -y clean all; rm -rf /var/cache/dnf

# Prune unwanted systemd units
RUN set -eux; \
    [ -d /lib/systemd/system/sysinit.target.wants ] && \
    find /lib/systemd/system/sysinit.target.wants/ -type l -not -name 'systemd-tmpfiles-setup.service' -delete || true; \
    [ -d /lib/systemd/system/multi-user.target.wants ] && \
    find /lib/systemd/system/multi-user.target.wants/ -type l -delete || true; \
    find /etc/systemd/system/*.wants/ -type l -delete || true; \
    [ -d /lib/systemd/system/local-fs.target.wants ] && \
    find /lib/systemd/system/local-fs.target.wants/ -type l -delete || true; \
    [ -d /lib/systemd/system/sockets.target.wants ] && \
    find /lib/systemd/system/sockets.target.wants/ -type l -not -name '*udev*' -delete || true; \
    [ -d /lib/systemd/system/basic.target.wants ] && \
    find /lib/systemd/system/basic.target.wants/ -type l -delete || true; \
    [ -d /lib/systemd/system/anaconda.target.wants ] && \
    find /lib/systemd/system/anaconda.target.wants/ -type l -delete || true

# Bring in compose file + configs used later
COPY docker-compose.yml ./
COPY ./configs/* /tmp/

# Generate multinode host list (exclude cdw/scdw)
RUN awk '/hostname:/ {print $2}' docker-compose.yml | grep -v -E '^(cdw|scdw)$' > /tmp/multinode-gpinit-hosts || true

# =========================
# Repos & base toolchain
# =========================
# Enable EPEL + CRB; prep metadata; (optionally force baseurls â€” see block below)
RUN set -eux; \
    dnf -y install dnf-plugins-core ca-certificates; update-ca-trust; \
    dnf -y install epel-release; \
    dnf config-manager --set-enabled crb; \
    dnf -y clean all; rm -rf /var/cache/dnf; dnf -y --refresh makecache


# Dev toolchain & libraries (consolidated, no duplicates; cmake3 -> cmake)
RUN set -eux; \
    dnf -y groupinstall "Development Tools"; \
    dnf -y --allowerasing install \
    sudo git golang rsync wget which curl \
    iproute net-tools openssh-server \
    glibc-langpack-en sshpass \
    gcc gcc-c++ make cmake bison flex pkgconfig diffutils \
    perl perl-Env perl-ExtUtils-Embed perl-Test-Simple perl-devel \
    python3 python3-pip python3-devel \
    openssl openssl-devel \
    krb5-libs krb5-devel \
    pam pam-devel \
    openldap openldap-devel \
    readline readline-devel \
    zlib zlib-devel \
    lz4 lz4-devel \
    libzstd libzstd-devel \
    libxml2 libxml2-devel \
    libicu libicu-devel \
    libevent libevent-devel \
    libcurl-devel \
    libuuid libuuid-devel \
    apr-devel \
    bzip2 bzip2-devel \
    libuv-devel libyaml-devel perl-IPC-Run protobuf-devel \
    java-11-openjdk-devel \
    jansson-devel \
    ; \
    dnf -y clean all; rm -rf /var/cache/dnf

# =========================
# Xerces-C (needed by Cloudberry)
# =========================
RUN set -eux; \
    cd /tmp; \
    curl -fsSL "https://archive.apache.org/dist/xerces/c/3/sources/xerces-c-${XERCES_VER}.tar.gz" -o xerces-c.tgz; \
    tar xzf xerces-c.tgz; \
    cmake -S "xerces-c-${XERCES_VER}" -B build-xerces \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DBUILD_SHARED_LIBS=ON; \
    cmake --build build-xerces -j"$(nproc)"; \
    cmake --install build-xerces; \
    ldconfig; \
    test -r /usr/local/include/xercesc/sax2/DefaultHandler.hpp; \
    test -r /usr/local/include/xercesc/util/XMLString.hpp; \
    test -r /usr/local/lib64/libxerces-c.so

# =========================
# System prep & gpadmin
# =========================
RUN set -eux; \
    cp /tmp/cbdb-sysctl.conf /etc/sysctl.conf; \
    cp /tmp/cbdb-limits.conf /etc/security/limits.d/cbdb-limits.conf; \
    cat "/usr/share/zoneinfo/${TIMEZONE_VAR}" > /etc/localtime; \
    echo "cdw" > /tmp/gpdb-hosts; \
    { echo "/usr/local/lib"; echo "/usr/local/lib64"; } >> /etc/ld.so.conf; \
    ldconfig; \
    chmod 755 /tmp/gpinitsystem_singlenode /tmp/init_system.sh || true; \
    hostname > /root/orig_hostname; \
    groupadd -r gpadmin; useradd -m -g gpadmin -G wheel gpadmin; \
    setcap cap_net_raw+ep /usr/bin/ping; \
    echo "cbdb@123" | passwd --stdin gpadmin; \
    echo "gpadmin ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers; \
    echo "root    ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers; \
    echo "export COORDINATOR_DATA_DIRECTORY=/data0/database/coordinator/gpseg-1" >> /home/gpadmin/.bashrc; \
    mkdir -p /data0/database/coordinator /data0/database/primary /data0/database/mirror; \
    chown -R gpadmin:gpadmin /data0; \
    ssh-keygen -A; \
    echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config

# =========================
# Build Cloudberry 
# =========================
# Note: we use shallow clone + pinned ref; submodules shallow as well
RUN set -eux; \
    cd /tmp; \
    git clone --depth=1 --branch "${CB_REF}" https://github.com/apache/cloudberry.git cloudberry; \
    cd cloudberry; \
    git submodule update --init --recursive --depth=1

# Safer ENV (no undefined var warnings)
ENV CC=/usr/bin/cc \
    CXX=/usr/bin/g++ \
    CFLAGS="-O3 -ftree-vectorize -Wno-suggest-attribute=format -Wno-missing-prototypes -Wno-error=cast-function-type" \
    CXXFLAGS="-O3 -ftree-vectorize -Wno-suggest-attribute=format -Wno-error" \
    LDFLAGS="-static-libgcc" \
    PERL=perl \
    PYTHON=python3 \
    LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH} \
    PATH=/usr/local/bin:${PATH}

# Configure (fixes -ldld -> -ldl) + common options
RUN set -eux; \
    cd /tmp/cloudberry; \
    sed -i 's/-ldld/-ldl/g' configure; \
    ./configure --prefix=/usr/local/cloudberry-db \
    --enable-pxf \
    --enable-debug \
    #--enable-external-fts \
    --enable-debug-extensions \
    --enable-ic-proxy \
    --enable-openssl-redirect \
    --enable-orca \
    --enable-pax \
    --with-gssapi --with-icu --with-ldap --with-libxml --with-lz4 \
    --with-openssl --with-pam --with-perl --with-pgport=5432 \
    --with-python --with-pythonsrc-ext --with-ssl=openssl \
    --with-includes=/usr/local/include \
    --with-libraries=/usr/local/lib64

# Build all (pax_storage clean as you had)
RUN set -eux; \
    cd /tmp/cloudberry/contrib/pax_storage && rm -rf build || true; \
    cd /tmp/cloudberry; \
    make -j"$(nproc)"; \
    make install

RUN set -eux; \
    cd /tmp/cloudberry/contrib; \
    make -j"$(nproc)"; \
    make install

RUN set -eux; \
    cd /tmp/cloudberry/gpcontrib; \
    make -j"$(nproc)"; \
    make install

RUN set -eux; \
    cd /tmp/cloudberry; \
    make -C gpMgmt clean all install




# Install ETCD manually
RUN wget https://github.com/etcd-io/etcd/releases/download/v3.5.2/etcd-v3.5.2-linux-amd64.tar.gz && \
    tar -xvzf etcd-v3.5.2-linux-amd64.tar.gz && \
    mv etcd-v3.5.2-linux-amd64/etcd* /usr/local/bin/ && \
    rm -rf etcd-v3.5.2-linux-amd64 etcd-v3.5.2-linux-amd64.tar.gz  


# =========================
# Defaults / runtime
# =========================
USER gpadmin
ENV USER=gpadmin
WORKDIR /home/gpadmin

EXPOSE 5432 22
VOLUME ["/sys/fs/cgroup"]

CMD ["bash","-c","/tmp/init_system.sh"]